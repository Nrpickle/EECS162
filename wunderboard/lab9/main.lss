
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  000002ac  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000218  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000370  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec3  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000574  00000000  00000000  00001f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f5  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000039a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00003d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b78  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000011d  00000000  00000000  00004d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c8  00000000  00000000  00004e85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ec ea       	ldi	r30, 0xAC	; 172
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 3b       	cpi	r26, 0xB4	; 180
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a4 eb       	ldi	r26, 0xB4	; 180
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a4 3b       	cpi	r26, 0xB4	; 180
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	65 d0       	rcall	.+202    	; 0x19a <main>
  d0:	eb c0       	rjmp	.+470    	; 0x2a8 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <initialize>:
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))


void initialize( void )
{
	CPU_PRESCALE(0);
  d4:	e1 e6       	ldi	r30, 0x61	; 97
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	10 82       	st	Z, r1
	
	USART_init(BAUD_RATE);
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	61 d0       	rcall	.+194    	; 0x1a6 <USART_init>
	USART_transmit('\f');	// Send form feed to clear the terminal.
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	6a d0       	rcall	.+212    	; 0x1bc <USART_transmit>
	USART_send_string("WunderBoard initializing...\r\n");
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	6e d0       	rcall	.+220    	; 0x1ca <USART_send_string>
	
	USART_send_string("\tSetting ADC prescaler and disabling free running mode...\r\n");
  ee:	8e e1       	ldi	r24, 0x1E	; 30
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	6b d0       	rcall	.+214    	; 0x1ca <USART_send_string>
	setup_ADC(ADC_PRESCALER_32, FALSE);
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	c8 d0       	rcall	.+400    	; 0x28a <setup_ADC>
	
	USART_send_string("\tEnabling ADC...\r\n");
  fa:	8a e5       	ldi	r24, 0x5A	; 90
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	65 d0       	rcall	.+202    	; 0x1ca <USART_send_string>
	ADC_enable();
 100:	9c d0       	rcall	.+312    	; 0x23a <ADC_enable>
	
	USART_send_string("\tSetting ADC reference to Vcc...\r\n");
 102:	8d e6       	ldi	r24, 0x6D	; 109
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	61 d0       	rcall	.+194    	; 0x1ca <USART_send_string>
	ADC_set_reference(ADC_REF_VCC);
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	af d0       	rcall	.+350    	; 0x26a <ADC_set_reference>
	
	// Configure IO //
	USART_send_string("\tConfiguring IO...\r\n");
 10c:	80 e9       	ldi	r24, 0x90	; 144
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	5c d0       	rcall	.+184    	; 0x1ca <USART_send_string>
	//DDRx corresponds to PORTx/PINx, dependng on direction of data flow -- PORT for output, PIN for input
	DDRA = 0x00;	// Buttons and switches
 112:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xE7;	// Red enable, green enable and audio out
 114:	87 ee       	ldi	r24, 0xE7	; 231
 116:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;	// Discrete LEDs
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 b9       	out	0x07, r24	; 7
	DDRE = 0x47;	// LED Column
 11c:	87 e4       	ldi	r24, 0x47	; 71
 11e:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0x00;	// Accelerometer
 120:	10 ba       	out	0x10, r1	; 16
	
	// Disable pullups and set outputs low //
	PORTA = 0x00;
 122:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x01;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x81;
 128:	81 e8       	ldi	r24, 0x81	; 129
 12a:	88 b9       	out	0x08, r24	; 8
	PORTE = 0x00;
 12c:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0x00;
 12e:	11 ba       	out	0x11, r1	; 17
	
	//Set OC1A to toggle
	TCCR1A = 0b01000000;
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	80 93 80 00 	sts	0x0080, r24
	// Clk/64 and CTC mode
	TCCR1B = 0b00001011;
 136:	8b e0       	ldi	r24, 0x0B	; 11
 138:	80 93 81 00 	sts	0x0081, r24

	OCR1A = 24;
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 89 00 	sts	0x0089, r25
 144:	80 93 88 00 	sts	0x0088, r24

	USART_send_string("\tSetting SPI\r\n");
 148:	85 ea       	ldi	r24, 0xA5	; 165
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	3e d0       	rcall	.+124    	; 0x1ca <USART_send_string>
	
	//Set the SPI bus appropriately to use the LED array
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 14e:	81 e5       	ldi	r24, 0x51	; 81
 150:	8c bd       	out	0x2c, r24	; 44

}
 152:	08 95       	ret

00000154 <initialize_TIMER0>:
unsigned char initialize_TIMER0()
{
	//See chapter 13 in the data sheet, and look up each of these values in turn.
		
	/* Set the CTC mode */
	//TCCR0A = ;
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	80 83       	st	Z, r24
	
	/* Set the Clock Frequency */
 15e:	af e6       	ldi	r26, 0x6F	; 111
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	8c 91       	ld	r24, X
 164:	82 60       	ori	r24, 0x02	; 2
 166:	8c 93       	st	X, r24
	//TCCR0B = ;
	
 168:	8e e8       	ldi	r24, 0x8E	; 142
 16a:	9b e5       	ldi	r25, 0x5B	; 91
 16c:	90 93 89 00 	sts	0x0089, r25
 170:	80 93 88 00 	sts	0x0088, r24
	/* Set initial count value */
	//OCR0A = ;
}
 174:	80 81       	ld	r24, Z
 176:	85 60       	ori	r24, 0x05	; 5
 178:	80 83       	st	Z, r24

/** This function checks if TIMER0 has elapsed. 
@return This function should return a 1 if the timer has elapsed, else return 0*/
 17a:	08 95       	ret

0000017c <__vector_17>:
unsigned char check_TIMER0()
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
	//look at the TIFR0 register in the datasheet. 
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	80 95       	com	r24
 18c:	88 b9       	out	0x08, r24	; 8
}
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <main>:
 19a:	9c df       	rcall	.-200    	; 0xd4 <initialize>
 19c:	db df       	rcall	.-74     	; 0x154 <initialize_TIMER0>
 19e:	83 d0       	rcall	.+262    	; 0x2a6 <clear_array>
 1a0:	18 b8       	out	0x08, r1	; 8
 1a2:	78 94       	sei
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <main+0xa>

000001a6 <USART_init>:
 1a6:	90 93 cd 00 	sts	0x00CD, r25
 1aa:	80 93 cc 00 	sts	0x00CC, r24
 1ae:	88 e1       	ldi	r24, 0x18	; 24
 1b0:	80 93 c9 00 	sts	0x00C9, r24
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	80 93 ca 00 	sts	0x00CA, r24
 1ba:	08 95       	ret

000001bc <USART_transmit>:
 1bc:	90 91 c8 00 	lds	r25, 0x00C8
 1c0:	95 ff       	sbrs	r25, 5
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <USART_transmit>
 1c4:	80 93 ce 00 	sts	0x00CE, r24
 1c8:	08 95       	ret

000001ca <USART_send_string>:
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	e8 2e       	mov	r14, r24
 1d4:	e7 01       	movw	r28, r14
 1d6:	7e 01       	movw	r14, r28
 1d8:	f9 2e       	mov	r15, r25
 1da:	e7 01       	movw	r28, r14
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <USART_send_string+0x16>
 1de:	ee df       	rcall	.-36     	; 0x1bc <USART_transmit>
 1e0:	89 91       	ld	r24, Y+
 1e2:	88 23       	and	r24, r24
 1e4:	e1 f7       	brne	.-8      	; 0x1de <USART_send_string+0x14>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <ADC_set_prescaler>:
 1f0:	ea e7       	ldi	r30, 0x7A	; 122
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	90 81       	ld	r25, Z
 1f6:	98 7f       	andi	r25, 0xF8	; 248
 1f8:	90 83       	st	Z, r25
 1fa:	90 81       	ld	r25, Z
 1fc:	87 70       	andi	r24, 0x07	; 7
 1fe:	89 2b       	or	r24, r25
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <ADC_set_free_running>:
 204:	88 23       	and	r24, r24
 206:	99 f0       	breq	.+38     	; 0x22e <ADC_set_free_running+0x2a>
 208:	80 91 7b 00 	lds	r24, 0x007B
 20c:	8b 7f       	andi	r24, 0xFB	; 251
 20e:	80 93 7b 00 	sts	0x007B, r24
 212:	80 91 7b 00 	lds	r24, 0x007B
 216:	8d 7f       	andi	r24, 0xFD	; 253
 218:	80 93 7b 00 	sts	0x007B, r24
 21c:	80 91 7b 00 	lds	r24, 0x007B
 220:	8e 7f       	andi	r24, 0xFE	; 254
 222:	80 93 7b 00 	sts	0x007B, r24
 226:	80 91 7a 00 	lds	r24, 0x007A
 22a:	80 62       	ori	r24, 0x20	; 32
 22c:	03 c0       	rjmp	.+6      	; 0x234 <ADC_set_free_running+0x30>
 22e:	80 91 7a 00 	lds	r24, 0x007A
 232:	8f 7d       	andi	r24, 0xDF	; 223
 234:	80 93 7a 00 	sts	0x007A, r24
 238:	08 95       	ret

0000023a <ADC_enable>:
 23a:	ea e7       	ldi	r30, 0x7A	; 122
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 68       	ori	r24, 0x80	; 128
 242:	80 83       	st	Z, r24
 244:	08 95       	ret

00000246 <ADC_start>:
 246:	ea e7       	ldi	r30, 0x7A	; 122
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <ADC_finish>:
 252:	ea e7       	ldi	r30, 0x7A	; 122
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 61       	ori	r24, 0x10	; 16
 25a:	80 83       	st	Z, r24
 25c:	08 95       	ret

0000025e <ADC_done>:
 25e:	90 91 7a 00 	lds	r25, 0x007A
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	94 ff       	sbrs	r25, 4
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret

0000026a <ADC_set_reference>:
 26a:	90 91 7c 00 	lds	r25, 0x007C
 26e:	9f 73       	andi	r25, 0x3F	; 63
 270:	90 93 7c 00 	sts	0x007C, r25
 274:	90 91 7c 00 	lds	r25, 0x007C
 278:	80 7c       	andi	r24, 0xC0	; 192
 27a:	89 2b       	or	r24, r25
 27c:	80 93 7c 00 	sts	0x007C, r24
 280:	e2 df       	rcall	.-60     	; 0x246 <ADC_start>
 282:	ed df       	rcall	.-38     	; 0x25e <ADC_done>
 284:	88 23       	and	r24, r24
 286:	e9 f3       	breq	.-6      	; 0x282 <ADC_set_reference+0x18>
 288:	e4 cf       	rjmp	.-56     	; 0x252 <ADC_finish>

0000028a <setup_ADC>:
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	0f 92       	push	r0
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	69 83       	std	Y+1, r22	; 0x01
 296:	ac df       	rcall	.-168    	; 0x1f0 <ADC_set_prescaler>
 298:	69 81       	ldd	r22, Y+1	; 0x01
 29a:	86 2f       	mov	r24, r22
 29c:	b3 df       	rcall	.-154    	; 0x204 <ADC_set_free_running>
 29e:	0f 90       	pop	r0
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	08 95       	ret

000002a6 <clear_array>:
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
