
wunder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  000002f6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c8  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002cc  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ffc  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f2  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ac  00000000  00000000  000025fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000039ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b06  00000000  00000000  000040b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000132  00000000  00000000  00004bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000208  00000000  00000000  00004cf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	if (leftAdjust == 1){
		SETPIN(ADMUX, ADLAR);
	}
	else{
		CLEARPIN(ADMUX, ADLAR);	// See pins.h
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 ef       	ldi	r30, 0xF6	; 246
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a2 3f       	cpi	r26, 0xF2	; 242
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a2 ef       	ldi	r26, 0xF2	; 242
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a2 3f       	cpi	r26, 0xF2	; 242
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	3b d0       	rcall	.+118    	; 0x146 <main>
  d0:	10 c1       	rjmp	.+544    	; 0x2f2 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <initialize>:
  }*/


void initialize()
{
	CPU_PRESCALE(0);
  d4:	e1 e6       	ldi	r30, 0x61	; 97
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	10 82       	st	Z, r1
	
	USART_Init(BAUD_RATE);
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	60 d0       	rcall	.+192    	; 0x1a4 <USART_Init>
	USART_Transmit('\f');	// Send form feed to clear the terminal.
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	69 d0       	rcall	.+210    	; 0x1ba <USART_Transmit>
	USART_SendString("WunderBoard initializing...\r\n");
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	6d d0       	rcall	.+218    	; 0x1c8 <USART_SendString>
	
	USART_SendString("\tSetting ADC prescaler and disabling free running mode...\r\n");
  ee:	8e e1       	ldi	r24, 0x1E	; 30
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	6a d0       	rcall	.+212    	; 0x1c8 <USART_SendString>
	SetupADC(ADC_PRESCALER_32, FALSE);
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	c7 d0       	rcall	.+398    	; 0x288 <SetupADC>
	
	USART_SendString("\tEnabling ADC...\r\n");
  fa:	8a e5       	ldi	r24, 0x5A	; 90
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	64 d0       	rcall	.+200    	; 0x1c8 <USART_SendString>
	ADCEnable();
 100:	9b d0       	rcall	.+310    	; 0x238 <ADCEnable>
	
	USART_SendString("\tSetting ADC reference to Vcc...\r\n");
 102:	8d e6       	ldi	r24, 0x6D	; 109
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	60 d0       	rcall	.+192    	; 0x1c8 <USART_SendString>
	ADCSetReference(ADC_REF_VCC);
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	ae d0       	rcall	.+348    	; 0x268 <ADCSetReference>
	
	// Configure IO //
	USART_SendString("\tConfiguring IO...\r\n");
 10c:	80 e9       	ldi	r24, 0x90	; 144
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	5b d0       	rcall	.+182    	; 0x1c8 <USART_SendString>
	DDRA = 0x00;	// Buttons and switches
 112:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xE7;	// Red enable, green enable and audio out
 114:	87 ee       	ldi	r24, 0xE7	; 231
 116:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;	// Discrete LEDs
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 b9       	out	0x07, r24	; 7
	DDRE = 0x47;	// Column
 11c:	87 e4       	ldi	r24, 0x47	; 71
 11e:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0x00;	// Accelerometer
 120:	10 ba       	out	0x10, r1	; 16
	
	// Disable pullups and set outputs low //
	PORTA = 0x00;
 122:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x01;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	85 b9       	out	0x05, r24	; 5
	PORTE = 0x00;
 128:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0x00;
 12a:	11 ba       	out	0x11, r1	; 17
	
	//Set OC1A to toggle
	TCCR1A = 0b01000000;
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	80 93 80 00 	sts	0x0080, r24
	// Clk/64 and CTC mode
	TCCR1B = 0b00001011;
 132:	8b e0       	ldi	r24, 0x0B	; 11
 134:	80 93 81 00 	sts	0x0081, r24

	OCR1A = 24;
 138:	88 e1       	ldi	r24, 0x18	; 24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 89 00 	sts	0x0089, r25
 140:	80 93 88 00 	sts	0x0088, r24
}
 144:	08 95       	ret

00000146 <main>:


int main(int argc, char **argv)
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	DSTATUS status;
	uint8_t buffer[512];
	unsigned char recv;
	
	initialize();
 14e:	c2 df       	rcall	.-124    	; 0xd4 <initialize>

	clearArray();
 150:	a9 d0       	rcall	.+338    	; 0x2a4 <clearArray>

	USART_SendString("\tSetting SPI\r\n");
 152:	85 ea       	ldi	r24, 0xA5	; 165
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	38 d0       	rcall	.+112    	; 0x1c8 <USART_SendString>
	
	//Set the SPI bus appropriately to use the LED array
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 158:	81 e5       	ldi	r24, 0x51	; 81
 15a:	8c bd       	out	0x2c, r24	; 44
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15c:	80 e5       	ldi	r24, 0x50	; 80
 15e:	93 ec       	ldi	r25, 0xC3	; 195
 160:	fc 01       	movw	r30, r24
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x1c>
 166:	fc 01       	movw	r30, r24
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x22>
 16c:	fc 01       	movw	r30, r24
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x28>
 172:	fc 01       	movw	r30, r24
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x2e>
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x32>

	int i = 0;
	uint8_t j = 0;
	
	
	USART_SendString("Testing LED ARRAY. Press S0, S1, and S2 to check all colors\r\n");
 17c:	84 eb       	ldi	r24, 0xB4	; 180
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	23 d0       	rcall	.+70     	; 0x1c8 <USART_SendString>

	PORTE = 4;
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	8e b9       	out	0x0e, r24	; 14
 186:	08 e8       	ldi	r16, 0x88	; 136
 188:	13 e1       	ldi	r17, 0x13	; 19
 18a:	c2 ee       	ldi	r28, 0xE2	; 226
 18c:	d4 e0       	ldi	r29, 0x04	; 4
	while(1){
		//PORTC = 0x77;
		
		set_array_red(PINA);
 18e:	80 b1       	in	r24, 0x00	; 0
 190:	9d d0       	rcall	.+314    	; 0x2cc <set_array_red>
 192:	c8 01       	movw	r24, r16
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x4e>
		_delay_ms(20);
		set_array_green(PINA);
 198:	80 b1       	in	r24, 0x00	; 0
 19a:	85 d0       	rcall	.+266    	; 0x2a6 <set_array_green>
 19c:	ce 01       	movw	r24, r28
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0x58>
 1a2:	f5 cf       	rjmp	.-22     	; 0x18e <main+0x48>

000001a4 <USART_Init>:
#include "usart.h"

void USART_Init(unsigned int baud)
{
	// Set baud rate
	UBRR1 = baud;
 1a4:	90 93 cd 00 	sts	0x00CD, r25
 1a8:	80 93 cc 00 	sts	0x00CC, r24
	
	// Enable transmit and receive
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
 1ac:	88 e1       	ldi	r24, 0x18	; 24
 1ae:	80 93 c9 00 	sts	0x00C9, r24
	
	// Set frame format: 8 data bits, 1 stop bit
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	80 93 ca 00 	sts	0x00CA, r24
}
 1b8:	08 95       	ret

000001ba <USART_Transmit>:

void USART_Transmit(unsigned char data)
{
	while (!(UCSR1A & (1 << UDRE1)));
 1ba:	90 91 c8 00 	lds	r25, 0x00C8
 1be:	95 ff       	sbrs	r25, 5
 1c0:	fc cf       	rjmp	.-8      	; 0x1ba <USART_Transmit>
	
	UDR1 = data;
 1c2:	80 93 ce 00 	sts	0x00CE, r24
}
 1c6:	08 95       	ret

000001c8 <USART_SendString>:
	
	return UDR1;
}

void USART_SendString(const char* str)
{
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	e8 2e       	mov	r14, r24
 1d2:	e7 01       	movw	r28, r14
 1d4:	7e 01       	movw	r14, r28
 1d6:	f9 2e       	mov	r15, r25
 1d8:	e7 01       	movw	r28, r14
	while (*str){
 1da:	01 c0       	rjmp	.+2      	; 0x1de <USART_SendString+0x16>
		USART_Transmit(*str);
 1dc:	ee df       	rcall	.-36     	; 0x1ba <USART_Transmit>
	return UDR1;
}

void USART_SendString(const char* str)
{
	while (*str){
 1de:	89 91       	ld	r24, Y+
 1e0:	88 23       	and	r24, r24
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <USART_SendString+0x14>
		USART_Transmit(*str);
		str++;
	}
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	08 95       	ret

000001ee <ADCSetPrescaler>:
	}
}

void ADCSetPrescaler(uint8_t prescale)
{
	CLEARPINS(ADCSRA, ADC_PRESCALER_MASK);
 1ee:	ea e7       	ldi	r30, 0x7A	; 122
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	90 81       	ld	r25, Z
 1f4:	98 7f       	andi	r25, 0xF8	; 248
 1f6:	90 83       	st	Z, r25
	SETPINS(ADCSRA, (prescale & ADC_PRESCALER_MASK));
 1f8:	90 81       	ld	r25, Z
 1fa:	87 70       	andi	r24, 0x07	; 7
 1fc:	89 2b       	or	r24, r25
 1fe:	80 83       	st	Z, r24
}
 200:	08 95       	ret

00000202 <ADCSetFreeRunning>:

void ADCSetFreeRunning(BOOL freeRun)
{	
	if (freeRun){
 202:	88 23       	and	r24, r24
 204:	99 f0       	breq	.+38     	; 0x22c <ADCSetFreeRunning+0x2a>
		// Set the auto trigger to free running mdoe
		CLEARPIN(ADCSRB, ADTS2);
 206:	80 91 7b 00 	lds	r24, 0x007B
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	80 93 7b 00 	sts	0x007B, r24
		CLEARPIN(ADCSRB, ADTS1);
 210:	80 91 7b 00 	lds	r24, 0x007B
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	80 93 7b 00 	sts	0x007B, r24
		CLEARPIN(ADCSRB, ADTS0);
 21a:	80 91 7b 00 	lds	r24, 0x007B
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	80 93 7b 00 	sts	0x007B, r24
		
		// Enable auto trigger
		SETPIN(ADCSRA, ADATE);
 224:	80 91 7a 00 	lds	r24, 0x007A
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	03 c0       	rjmp	.+6      	; 0x232 <ADCSetFreeRunning+0x30>
	}
	else{
		// Disable auto trigger mode
		CLEARPIN(ADCSRA, ADATE);
 22c:	80 91 7a 00 	lds	r24, 0x007A
 230:	8f 7d       	andi	r24, 0xDF	; 223
 232:	80 93 7a 00 	sts	0x007A, r24
 236:	08 95       	ret

00000238 <ADCEnable>:
	CLEARPIN(ADCSRA, ADIE);
}

void ADCEnable(void)
{
	SETPIN(ADCSRA, ADEN);
 238:	ea e7       	ldi	r30, 0x7A	; 122
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	80 83       	st	Z, r24
}
 242:	08 95       	ret

00000244 <ADCStart>:
	CLEARPIN(ADCSRA, ADEN);
}

void ADCStart(void)
{
	SETPIN(ADCSRA, ADSC);
 244:	ea e7       	ldi	r30, 0x7A	; 122
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	80 83       	st	Z, r24
}
 24e:	08 95       	ret

00000250 <ADCFinish>:

void ADCFinish(void)
{
	SETPIN(ADCSRA, ADIF);
 250:	ea e7       	ldi	r30, 0x7A	; 122
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 61       	ori	r24, 0x10	; 16
 258:	80 83       	st	Z, r24
}
 25a:	08 95       	ret

0000025c <ADCDone>:

BOOL ADCDone(void)
{
	return BOOL(GETPIN(ADCSRA, ADIF));
 25c:	90 91 7a 00 	lds	r25, 0x007A
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	94 ff       	sbrs	r25, 4
 264:	80 e0       	ldi	r24, 0x00	; 0
}
 266:	08 95       	ret

00000268 <ADCSetReference>:
	}
}

void ADCSetReference(uint8_t reference)
{
	CLEARPINS(ADMUX, ADC_REF_MASK);
 268:	90 91 7c 00 	lds	r25, 0x007C
 26c:	9f 73       	andi	r25, 0x3F	; 63
 26e:	90 93 7c 00 	sts	0x007C, r25
	SETPINS(ADMUX, (reference & ADC_REF_MASK));
 272:	90 91 7c 00 	lds	r25, 0x007C
 276:	80 7c       	andi	r24, 0xC0	; 192
 278:	89 2b       	or	r24, r25
 27a:	80 93 7c 00 	sts	0x007C, r24
	
	// First read after changing reference is probably garbage
	ADCStart();
 27e:	e2 df       	rcall	.-60     	; 0x244 <ADCStart>
	// Wait for the AD conversion to complete
	while (!ADCDone());
 280:	ed df       	rcall	.-38     	; 0x25c <ADCDone>
 282:	88 23       	and	r24, r24
 284:	e9 f3       	breq	.-6      	; 0x280 <ADCSetReference+0x18>

	ADCFinish();
}
 286:	e4 cf       	rjmp	.-56     	; 0x250 <ADCFinish>

00000288 <SetupADC>:
{
	return BOOL(GETPIN(ADCSRA, ADIF));
}

void SetupADC(uint8_t prescale, BOOL freeRun)
{
 288:	df 93       	push	r29
 28a:	cf 93       	push	r28
 28c:	0f 92       	push	r0
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
	ADCSetPrescaler(prescale);	// Set prescaler bits
 292:	69 83       	std	Y+1, r22	; 0x01
 294:	ac df       	rcall	.-168    	; 0x1ee <ADCSetPrescaler>
	ADCSetFreeRunning(freeRun);		// Set free run bit
 296:	69 81       	ldd	r22, Y+1	; 0x01
 298:	86 2f       	mov	r24, r22
 29a:	b3 df       	rcall	.-154    	; 0x202 <ADCSetFreeRunning>
}
 29c:	0f 90       	pop	r0
 29e:	cf 91       	pop	r28
 2a0:	df 91       	pop	r29
 2a2:	08 95       	ret

000002a4 <clearArray>:

void clearArray(void)
{
	//write 0x00 three times to SPI
	//Strobe LED Latch
}
 2a4:	08 95       	ret

000002a6 <set_array_green>:

void set_array_green(unsigned char rows)
{
	//write 0x00,0xFF,0x00 to SPI
	//Strobe LED Latch
	SPDR = 0x00;
 2a6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
 2a8:	0d b4       	in	r0, 0x2d	; 45
 2aa:	07 fe       	sbrs	r0, 7
 2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <set_array_green+0x2>
	SPDR = rows;
 2ae:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 2b0:	0d b4       	in	r0, 0x2d	; 45
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <set_array_green+0xa>
	SPDR = 0x00;
 2b6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
 2b8:	0d b4       	in	r0, 0x2d	; 45
 2ba:	07 fe       	sbrs	r0, 7
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <set_array_green+0x12>
	
	PORTB |= 1 << 7;
 2be:	2f 9a       	sbi	0x05, 7	; 5
 2c0:	8a ef       	ldi	r24, 0xFA	; 250
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <set_array_green+0x1e>
	_delay_ms(1);
	PORTB &= ~(1 << 7);
 2c8:	2f 98       	cbi	0x05, 7	; 5
		
}
 2ca:	08 95       	ret

000002cc <set_array_red>:

void set_array_red(unsigned char rows)
{
	//write 0x00,0xFF,0x00 to SPI
	//Strobe LED Latch
	SPDR = rows;
 2cc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 2ce:	0d b4       	in	r0, 0x2d	; 45
 2d0:	07 fe       	sbrs	r0, 7
 2d2:	fd cf       	rjmp	.-6      	; 0x2ce <set_array_red+0x2>
	SPDR = 0x00;
 2d4:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
 2d6:	0d b4       	in	r0, 0x2d	; 45
 2d8:	07 fe       	sbrs	r0, 7
 2da:	fd cf       	rjmp	.-6      	; 0x2d6 <set_array_red+0xa>
	SPDR = 0x00;
 2dc:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
 2de:	0d b4       	in	r0, 0x2d	; 45
 2e0:	07 fe       	sbrs	r0, 7
 2e2:	fd cf       	rjmp	.-6      	; 0x2de <set_array_red+0x12>
	
	PORTB |= 1 << 7;
 2e4:	2f 9a       	sbi	0x05, 7	; 5
 2e6:	8a ef       	ldi	r24, 0xFA	; 250
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <set_array_red+0x1e>
	_delay_ms(1);
	PORTB &= ~(1 << 7);
 2ee:	2f 98       	cbi	0x05, 7	; 5

	//write 0xFF,0x00,0x00 to SPI
	//Strobe LED Latch
}
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
